I"òv<p>So far in our series, we‚Äôve <a href="https://daveabrock.com/2020/10/26/blast-off-blazor-intro">walked through the intro</a>, <a href="https://daveabrock.com/2020/10/28/blast-off-blazor-404-page">wrote our first component</a>, and <a href="https://daveabrock.com/2020/11/08/blast-off-blazor-update-head">dynamically updated the HTML head from a component</a>.</p>

<p>I‚Äôve made testing a crucial part of this project and not an afterthought‚Äîas discussed previously, we‚Äôre <a href="https://bunit.egilhansen.com/docs/getting-started/index.html">using the bUnit project</a> to unit test our components. As I <a href="https://daveabrock.com/2020/11/08/blast-off-blazor-update-head#what-about-the-tests">discussed last time</a>, though, testing our <code class="language-plaintext highlighter-rouge">Index</code> component was a little cumbersome because of the <code class="language-plaintext highlighter-rouge">HttpClient</code> dependency. There are ways to <a href="https://bunit.egilhansen.com/docs/test-doubles/mocking-httpclient.html">mock and test it</a>, but we should ask ‚Ä¶ why are we injecting it directly?</p>

<p>It was great to inject it easily to get up and running but what happens as we build more components and more APIs to call, each with different endpoints and request headers? How will we manage that? And if we want to unit test our components, will I have to mock an <code class="language-plaintext highlighter-rouge">HttpClient</code> every time? What a nightmare.</p>

<p>Instead, we‚Äôll create an API wrapper and inject that in our components. Any service-level implementation details can be abstracted away from the component. Along the way, we‚Äôll learn about working with separate C# classes, using a named <code class="language-plaintext highlighter-rouge">IHttpClientFactory</code>, and how to quickly mock and test a service in bUnit. Let‚Äôs get started.</p>

<p>This post contains the following content.</p>

<ul>
  <li><a href="#does-my-code-always-have-to-reside-in-code-blocks">Does my code always have to reside in @code blocks?</a></li>
  <li><a href="#add-an-api-service-wrapper-to-our-project">Add an API service wrapper to our project</a>
    <ul>
      <li><a href="#how-to-call-httpclient-from-our-app">How to call HttpClient from our app</a></li>
      <li><a href="#inject-our-new-service-from-our-component">Inject our new service from our component</a></li>
    </ul>
  </li>
  <li><a href="#test-our-component">Test our component</a></li>
  <li><a href="#wrap-up">Wrap up</a></li>
</ul>

<h1 id="does-my-code-always-have-to-reside-in-code-blocks">Does my code always have to reside in @code blocks?</h1>

<p>To recap, here‚Äôs how our main component currently looks.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">@page</span> <span class="s">"/"</span>
<span class="n">@inject</span> <span class="n">HttpClient</span> <span class="n">http</span>

<span class="nf">@if</span> <span class="p">(</span><span class="n">image</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="p">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="err">="</span><span class="nc">p</span><span class="p">-</span><span class="m">4</span><span class="s">"&gt;
</span>        <span class="p">&lt;</span><span class="n">h1</span> <span class="k">class</span><span class="err">="</span><span class="nc">text</span><span class="p">-</span><span class="m">6</span><span class="n">xl</span><span class="s">"&gt;@image.Title&lt;/h1&gt;
</span>        <span class="p">&lt;</span><span class="n">p</span> <span class="k">class</span><span class="err">="</span><span class="nc">text</span><span class="p">-</span><span class="m">2</span><span class="n">xl</span><span class="s">"&gt;@FormatDate(image.Date)&lt;/p&gt;
</span>        <span class="nf">@if</span> <span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">Copyright</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">Copyright</span><span class="p">:</span> <span class="n">@image</span><span class="p">.</span><span class="n">Copyright</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
        <span class="p">}</span>
    <span class="p">&lt;/</span><span class="n">div</span><span class="p">&gt;</span>

     <span class="p">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="err">="</span><span class="nc">flex</span> <span class="n">justify</span><span class="p">-</span><span class="n">center</span> <span class="n">p</span><span class="p">-</span><span class="m">4</span><span class="s">"&gt;
</span>        <span class="p">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="p">=</span><span class="s">"@image.Url"</span> <span class="k">class</span><span class="err">="</span><span class="nc">rounded</span><span class="p">-</span><span class="n">lg</span> <span class="n">h</span><span class="p">-</span><span class="m">500</span> <span class="n">w</span><span class="p">-</span><span class="m">500</span> <span class="n">flex</span> <span class="n">items</span><span class="p">-</span><span class="n">center</span> <span class="n">justify</span><span class="p">-</span><span class="n">center</span><span class="s">"&gt;&lt;br /&gt;
</span>    <span class="p">&lt;/</span><span class="n">div</span><span class="p">&gt;</span>
<span class="p">}</span>

<span class="n">@code</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">Data</span><span class="p">.</span><span class="n">Image</span> <span class="n">image</span><span class="p">;</span>

    <span class="k">private</span> <span class="kt">string</span> <span class="nf">FormatDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">date</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">date</span><span class="p">.</span><span class="nf">ToLongDateString</span><span class="p">();</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">OnInitializedAsync</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">image</span> <span class="p">=</span> <span class="k">await</span> <span class="n">http</span><span class="p">.</span><span class="n">GetFromJsonAsync</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">.</span><span class="n">Image</span><span class="p">&gt;(</span><span class="s">"api/image"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While we don‚Äôt have a lot of lines of code in the <code class="language-plaintext highlighter-rouge">@code</code> block, there‚Äôs still a lot going on in this component. We‚Äôre directly injecting <code class="language-plaintext highlighter-rouge">HttpClient</code> to directly call our Azure Function. In the <code class="language-plaintext highlighter-rouge">@code</code> section I‚Äôve written a helper method as well as <code class="language-plaintext highlighter-rouge">OnInitializedAsync</code> behavior. As we add more features and functionality, that <code class="language-plaintext highlighter-rouge">@code</code> block is only going to grow. We can definitely keep the C# coupled with our Razor syntax, as it makes it easy to see all that‚Äôs going on in one file‚Äîbut we also can move all of this to a <a href="https://docs.microsoft.com/aspnet/core/blazor/components/?view=aspnetcore-5.0#partial-class-support">separate C# file</a> for reuse and maintainability purposes.</p>

<p>This is a ‚Äúcode-behind‚Äù approach, as the code will sit behind the view logic in a partial class. To do this, we‚Äôll create an <code class="language-plaintext highlighter-rouge">Index.razor.cs</code> file. If you‚Äôre using Visual Studio, you‚Äôll see it‚Äôs nested ‚Äúinside‚Äù the Blazor component.</p>

<p>Cut and paste everything inside the <code class="language-plaintext highlighter-rouge">@code</code> block to the new file. You‚Äôll see some build errors and will need to resolve some dependencies. To resolve these:</p>

<ul>
  <li>Make the new file a <code class="language-plaintext highlighter-rouge">partial class</code></li>
  <li>Add a using statement for <code class="language-plaintext highlighter-rouge">Microsoft.AspNetCore.Components</code></li>
  <li>With the using added, inherit <code class="language-plaintext highlighter-rouge">ComponentBase</code></li>
</ul>

<p>What about injecting <code class="language-plaintext highlighter-rouge">HttpClient</code>, though? We can‚Äôt carry over that Razor syntax to our C# file. Instead, we‚Äôll add it as a property with an <code class="language-plaintext highlighter-rouge">Inject</code> annotation above it.</p>

<p>Here‚Äôs how the class looks:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Client.Services</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Components</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Client.Pages</span>
<span class="p">{</span>
    <span class="k">partial</span> <span class="k">class</span> <span class="nc">Index</span> <span class="p">:</span> <span class="n">ComponentBase</span>
    <span class="p">{</span>
        <span class="n">Image</span> <span class="n">_image</span><span class="p">;</span>

        <span class="p">[</span><span class="n">Inject</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">HttpClient</span> <span class="n">http</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">FormatDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">date</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">date</span><span class="p">.</span><span class="nf">ToLongDateString</span><span class="p">();</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">OnInitializedAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">image</span> <span class="p">=</span> <span class="k">await</span> <span class="n">http</span><span class="p">.</span><span class="n">GetFromJsonAsync</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">.</span><span class="n">Image</span><span class="p">&gt;(</span><span class="s">"api/image"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, when we remove the <code class="language-plaintext highlighter-rouge">@code</code> block and <code class="language-plaintext highlighter-rouge">HttpClient</code> injection, our component looks cleaner:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
@page "/"

@if (_image is null)
{
    <span class="nt">&lt;p&gt;</span>Loading...<span class="nt">&lt;/p&gt;</span>
}
else
{
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"p-4"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-6xl"</span><span class="nt">&gt;</span>@_image.Title<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text-2xl"</span><span class="nt">&gt;</span>@FormatDate(_image.Date)<span class="nt">&lt;/p&gt;</span>
        @if (_image.Copyright != null)
        {
            <span class="nt">&lt;p&gt;</span>Copyright: @_image.Copyright<span class="nt">&lt;/p&gt;</span>
        }
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-center p-4"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"@_image.Url"</span> <span class="na">class=</span><span class="s">"rounded-lg h-500 w-500 flex items-center justify-center"</span><span class="nt">&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
}
</code></pre></div></div>

<p>If we run the project, it‚Äôll work as it always has. Now, let‚Äôs build out an API wrapper.</p>

<h1 id="add-an-api-service-wrapper-to-our-project">Add an API service wrapper to our project</h1>

<p>We‚Äôre now ready to build our service. In our <code class="language-plaintext highlighter-rouge">Client</code> project, create an <code class="language-plaintext highlighter-rouge">ApiClientService.cs</code> file inside a <code class="language-plaintext highlighter-rouge">Services</code> folder. We‚Äôll stub it out for now with an interface to boot:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IApiClientService</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Image</span><span class="p">&gt;</span> <span class="nf">GetImageOfDay</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ApiClientService</span> <span class="p">:</span> <span class="n">IApiClientService</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Image</span><span class="p">&gt;</span> <span class="nf">GetImageOfDay</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We‚Äôll also want to add the new folder to bottom of our <code class="language-plaintext highlighter-rouge">_Imports.razor</code> file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@using Services
</code></pre></div></div>

<h2 id="how-to-call-httpclient-from-our-app">How to call HttpClient from our app</h2>

<p>We could still call <code class="language-plaintext highlighter-rouge">HttpClient</code> directly, but over the course of this project we‚Äôll be connecting to various APIs with different endpoints, different headers, and so on. As we look forward, <a href="https://docs.microsoft.com/aspnet/core/fundamentals/http-requests?view=aspnetcore-5.0#named-clients">we should create an <code class="language-plaintext highlighter-rouge">IHttpClientFactory</code></a>. This allows us to work with named instances, allows us to delegate middleware handlers, and manages the lifetime of handler instances for us.</p>

<p>To add a factory to our project, we‚Äôll add a named client to our <code class="language-plaintext highlighter-rouge">Program.cs</code> file. While we‚Äôre here, we‚Äôll inject our new <code class="language-plaintext highlighter-rouge">IApiClientService</code> as well.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// important stuff removed for brevity</span>
    <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"imageofday"</span><span class="p">,</span> <span class="n">iod</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">iod</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"API_Prefix"</span><span class="p">]</span> <span class="p">??</span> <span class="n">builder</span><span class="p">.</span><span class="n">HostEnvironment</span><span class="p">.</span><span class="n">BaseAddress</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IApiClientService</span><span class="p">,</span> <span class="n">ApiClientService</span><span class="p">&gt;();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In <code class="language-plaintext highlighter-rouge">AddHttpClient</code>, I‚Äôm specifying a URI, and referencing my API as <code class="language-plaintext highlighter-rouge">imageofday</code>. With that in place, I can scoot over to <code class="language-plaintext highlighter-rouge">ApiClientService</code> and make it work.</p>

<p>First, let‚Äôs inject our <code class="language-plaintext highlighter-rouge">ILogger</code> and <code class="language-plaintext highlighter-rouge">IHttpClientFactory</code> in the constructor.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ApiClientService</span> <span class="p">:</span> <span class="n">IApiClientService</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">IHttpClientFactory</span> <span class="n">_clientFactory</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="n">ILogger</span><span class="p">&lt;</span><span class="n">ApiClientService</span><span class="p">&gt;</span> <span class="n">_logger</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">ApiClientService</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">ApiClientService</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">,</span> <span class="n">IHttpClientFactory</span> <span class="n">clientFactory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_clientFactory</span> <span class="p">=</span> <span class="n">clientFactory</span><span class="p">;</span>
        <span class="n">_logger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In our <code class="language-plaintext highlighter-rouge">GetImageOfDay</code> logic, we‚Äôll create our named client and use it to call to our Azure Function at the <code class="language-plaintext highlighter-rouge">api/image</code> endpoint. Of course, we‚Äôll catch any exceptions and log them appropriately.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Image</span><span class="p">&gt;</span> <span class="nf">GetImageOfDay</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="n">_clientFactory</span><span class="p">.</span><span class="nf">CreateClient</span><span class="p">(</span><span class="s">"imageofday"</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">image</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">GetFromJsonAsync</span><span class="p">&lt;</span><span class="n">Image</span><span class="p">&gt;(</span><span class="s">"api/image"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logger</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">ex</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="inject-our-new-service-from-our-component">Inject our new service from our component</h2>

<p>With the service wrapper now complete, we can inject our new service instead of direct dependency on <code class="language-plaintext highlighter-rouge">HttpClient</code>. Change the <code class="language-plaintext highlighter-rouge">HttpClient</code> injection in <code class="language-plaintext highlighter-rouge">Index.razor.cs</code> to our new service instead:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Inject</span><span class="p">]</span>
<span class="k">public</span> <span class="n">IApiClientService</span> <span class="n">ApiClientService</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

<span class="c1">// stuff</span>

<span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">OnInitializedAsync</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">_image</span> <span class="p">=</span> <span class="k">await</span> <span class="n">ApiClientService</span><span class="p">.</span><span class="nf">GetImageOfDay</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you run the app, you should see no changes‚Äîwe didn‚Äôt have to modify the markup at all‚Äîbut we‚Äôve made our lives a lot easier and now testing should be a snap as we add to our project).</p>

<h1 id="test-our-component">Test our component</h1>

<p>With our API wrapper in place, testing is a whole lot easier. I‚Äôve created an <code class="language-plaintext highlighter-rouge">ImageOfDayTest</code> class in our <code class="language-plaintext highlighter-rouge">Test</code> library.</p>

<p>I‚Äôll be adding a reference to <code class="language-plaintext highlighter-rouge">Moq</code>, a popular mocking library, to mimic the response back from our service. You can <a href="https://www.nuget.org/packages/moq/">download the package</a> from NuGet Package Manager or just drop this in <code class="language-plaintext highlighter-rouge">Test.csproj</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"Moq"</span> <span class="na">Version=</span><span class="s">"4.15.1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<p>I‚Äôll build out a sample <code class="language-plaintext highlighter-rouge">Image</code> to return from the service. I‚Äôll create a private helper method for that:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="n">Image</span> <span class="nf">GetImage</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">Image</span>
    <span class="p">{</span>
        <span class="n">Date</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">2020</span><span class="p">,</span> <span class="m">01</span><span class="p">,</span> <span class="m">01</span><span class="p">),</span>
        <span class="n">Title</span> <span class="p">=</span> <span class="s">"My Sample Image"</span><span class="p">,</span>
        <span class="n">Url</span> <span class="p">=</span> <span class="s">"https://nasa.gov"</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In my test case, I‚Äôll mock my client, return an image, and inject it into my bUnit‚Äôs <code class="language-plaintext highlighter-rouge">TestContext</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">mockClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IApiClientService</span><span class="p">&gt;();</span>
<span class="n">mockClient</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="nf">GetImageOfDay</span><span class="p">()).</span><span class="nf">ReturnsAsync</span><span class="p">(</span><span class="nf">GetImage</span><span class="p">());</span>

<span class="k">using</span> <span class="nn">var</span> <span class="n">ctx</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TestContext</span><span class="p">();</span>
<span class="n">ctx</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSingleton</span><span class="p">(</span><span class="n">mockClient</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
</code></pre></div></div>

<p class="notice--info"><em>Note</em>: The integration test vs. mocking in a unit test <a href="https://tyrrrz.me/blog/unit-testing-is-overrated">is a hot topic</a>, especially when testing dependencies. My intent here is to unit test rendering behavior and not my services, but calling the endpoint from the test is also an option if you‚Äôre up for it.</p>

<p>With that in place, I can render my component, and assert against expected output with the following code:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">cut</span> <span class="p">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">RenderComponent</span><span class="p">&lt;</span><span class="n">Client</span><span class="p">.</span><span class="n">Pages</span><span class="p">.</span><span class="n">Index</span><span class="p">&gt;();</span>
<span class="kt">var</span> <span class="n">h1Element</span> <span class="p">=</span> <span class="n">cut</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">"h1"</span><span class="p">).</span><span class="n">TextContent</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">imgElement</span> <span class="p">=</span> <span class="n">cut</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">"img"</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">pElement</span> <span class="p">=</span> <span class="n">cut</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">"p"</span><span class="p">);</span>

<span class="n">h1Element</span><span class="p">.</span><span class="nf">MarkupMatches</span><span class="p">(</span><span class="s">"My Sample Image"</span><span class="p">);</span>
<span class="n">imgElement</span><span class="p">.</span><span class="nf">MarkupMatches</span><span class="p">(</span><span class="s">@"&lt;img src=""https://nasa.gov"" 
    class=""rounded-lg h-500 w-500 flex items-center justify-center""&gt;"</span><span class="p">);</span>
<span class="n">pElement</span><span class="p">.</span><span class="nf">MarkupMatches</span><span class="p">(</span><span class="s">@"&lt;p class=""text-2xl""&gt;Wednesday, January 1, 2020&lt;/p&gt;"</span><span class="p">);</span>
</code></pre></div></div>

<p>My tests pass‚Äîship it!</p>

<h1 id="wrap-up">Wrap up</h1>

<p>In this post, we learned how to isolate <code class="language-plaintext highlighter-rouge">HttpClient</code> dependencies in our Blazor code. To do this, we moved our component‚Äôs C# code to a partial ‚Äúcode-behind class‚Äù and built a service that uses the <code class="language-plaintext highlighter-rouge">IHttpClientFactory</code>. Then, we were able to use bUnit to test our component quite easily.</p>

<p>Are refactorings sexy? No. Are they fun? Also no. Are they important? Yes. Is this the last question I‚Äôll ask myself in this post? Also yes. In the next post, we‚Äôll get back to updating the UI.</p>
:ET