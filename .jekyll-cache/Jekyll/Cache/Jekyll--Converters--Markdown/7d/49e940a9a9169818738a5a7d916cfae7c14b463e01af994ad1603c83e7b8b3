I"èZ<p><img src="https://raw.githubusercontent.com/daveabrock/daveabrock.github.io/master/THE%20.NET%20STACKS.png" alt="Newsletter image" /></p>

<p>Happy Monday. Do you ever <a href="https://www.youtube.com/watch?v=y8OnoxKotPQ">watch a satire and think itâ€™s a documentary</a>?</p>

<p>This week, weâ€™ll:</p>

<ul>
  <li>Get excited about many-to-many in EF Core</li>
  <li>Take a look at some current and upcoming NuGet changes</li>
  <li>Check in on the community</li>
</ul>

<h2 id="many-to-many-in-ef-core-5">Many-to-many in EF Core 5</h2>

<p>So this is exciting: many-to-many support is now included in the Entity Framework Core daily builds, and the team <a href="https://www.youtube.com/watch?v=W1sxepfIMRM">spent this weekâ€™s community standup showing it off</a>.</p>

<p>A big part of this work includes the concept of skip navigations, or many-to-many navigation properties. For example, hereâ€™s a basic model that assigns links in a newsletter (what can I say, itâ€™s fresh on my mind) and is a good use case for many-to-many and is â€¦ <a href="https://github.com/dotnet/efcore/issues/19003">heavily inspired and/or outright stolen</a> from the GitHub issue:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Link</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">LinkId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LinkTag</span><span class="p">&gt;</span> <span class="n">LinkTags</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Tag</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">TagId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LinkTag</span><span class="p">&gt;</span> <span class="n">LinkTags</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">LinkTag</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">LinkId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">Link</span> <span class="n">Link</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="n">TagId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">Tag</span> <span class="n">Tag</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">LinkCreated</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So, to load a link and its tags, Iâ€™d need to use two navigation properties, and refer to the joining table when performing queries:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">linksAndTags</span>
    <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Links</span>
        <span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">LinkTags</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">ThenInclude</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Tag</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
</code></pre></div></div>

<p>With many-to-many in EF Core 5, I can skip over the join table and use direct navigation properties. We can instead get a little more direct:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Link</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">LinkId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Tag</span><span class="p">&gt;</span> <span class="n">Tags</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// Skips right to Tag</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LinkTag</span><span class="p">&gt;</span> <span class="n">LinkTags</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Tag</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">TagId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Link</span><span class="p">&gt;</span> <span class="n">Links</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// Skips right to Link</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LinkTag</span><span class="p">&gt;</span> <span class="n">LinkTags</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Look how easy querying is now:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">linksAndTags</span> 
    <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Links</span>
        <span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Tags</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
</code></pre></div></div>

<p>In the standup, Arthur Vickers mentioned an important fact thatâ€™s easy to overlook: while the release timing is similar, EF Core 5 is not bound to .NET 5. It targets .NET Standard 2.1, so can be used in any .NET Core 3.<em>x</em> apps (and of course is available for use in .NET 5). Take a look at <a href="https://docs.microsoft.com/dotnet/standard/net-standard">the docs</a> to learn more about .NET Standard compatibility.</p>

<h2 id="checking-in-on-nuget-changes">Checking in on NuGet changes</h2>

<p>This week, the .NET Tooling community standup <a href="https://www.youtube.com/watch?v=fijQkqWssn0">brought in the NuGet team</a> to talk about what theyâ€™re working on. They mentioned three key things: UX enhancements to <em>nuget.org</em>, improvements to package compatibility in Visual Studio, and better README support for package authors.</p>

<p>The team has been working on improving the experience on nuget.orgâ€”in the last few weeks, theyâ€™ve blogged about how you can <a href="https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/">use advanced search</a> and also <a href="https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/">view dependent packages</a>. While I prefer to work with packages in my IDE, you can hit up <em>nuget.org</em> for a better view, but itâ€™s hard to filter through the noise. The new filtering options are a welcome improvement: I can filter by dependencies, tools, templates, relevance, downloads, and prereleases. Whether I value stability or finding out whatâ€™s new, the experience is a lot better now.</p>

<p>I was most interested to hear about tooling support, as thatâ€™s how a lot of us use NuGet most. The team discussed upcoming changes to floating version support. Floating version support means youâ€™re using the latest version of a range you specify: for example, if you say you want version <code class="language-plaintext highlighter-rouge">2.*</code> of a package, and it rolled out <code class="language-plaintext highlighter-rouge">1.0</code>, <code class="language-plaintext highlighter-rouge">2.0</code>, and <code class="language-plaintext highlighter-rouge">2.1</code> versions, youâ€™re using <code class="language-plaintext highlighter-rouge">2.1</code>. Soon, youâ€™ll be able to specify this in the <code class="language-plaintext highlighter-rouge">Version</code> field in the NuGet UIâ€”preventing you from hacking away from the project file. As a whole, the <code class="language-plaintext highlighter-rouge">Version</code> field will allow more flexibility and not just be a drop-down.</p>

<p>Lastly, if you author NuGet packages, README links will no longer be a post-package upload but built right into the Visual Studio Package Properties. That will allow you to easily have your package documentation on <em>nuget.org</em>, and the NuGet UI in Visual Studio will have a link to it.</p>

<h2 id="-last-week-in-the-net-world">ðŸŒŽ Last week in the .NET world</h2>

<h3 id="-the-top-3">ðŸ”¥ The Top 3</h3>

<ul>
  <li>Matt Mitchell <a href="https://devblogs.microsoft.com/dotnet/a-deep-dive-into-how-net-builds-and-ships/">does a deep dive on how .NET builds and ships</a>.</li>
  <li>Jeremy Likness <a href="https://blog.jeremylikness.com/blog/inspect-and-mutate-iqueryable-expression-trees/">inspects and mutates IQueryable expression trees</a>.</li>
  <li>Matthew Jones <a href="https://exceptionnotfound.net/using-conditional-csharp-linq-clauses-to-make-a-multiple-input-search-engine">uses conditional C# LINQ clauses to make a multiple-input search engine</a>.</li>
</ul>

<h3 id="-announcements">ðŸ“¢ Announcements</h3>

<ul>
  <li>Phillip Carter <a href="https://devblogs.microsoft.com/dotnet/help-us-improve-visual-studio-project-tooling-for-net-core/">is looking for feedback on the .NET project system in Visual Studio</a>.</li>
  <li>Jon Gallant <a href="https://devblogs.microsoft.com/azure-sdk/azure-sdk-release-august-2020/">talks about the August release of the Azure SDKs</a>, and Jianghao Lu <a href="https://devblogs.microsoft.com/azure-sdk/azure-identity-august-2020-ga/">shows us whatâ€™s new in the Azure Identity release</a>.</li>
  <li>Azure Cosmos DB serverless <a href="https://azure.microsoft.com/updates/serverless-offer-for-azure-cosmos-db-now-in-public-preview/">is now in preview</a>.</li>
  <li>You can now <a href="https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/">view dependent packages on nuget.org</a>.</li>
  <li>AWS SDK for .NET v3.5 <a href="https://aws.amazon.com/blogs/developer/aws-sdk-for-net-v3-5-now-generally-available">is generally available</a>.</li>
  <li>Mads Kristensen <a href="https://devblogs.microsoft.com/visualstudio/live-coding-visual-studio-extensions/">announces his new stream, where he writes or updates Visual Studio extensions</a>.</li>
</ul>

<h3 id="-community-and-events">ðŸ“… Community and events</h3>

<ul>
  <li>The .NET Docs Show <a href="https://www.youtube.com/watch?v=d7wtGgaNeS4">talks with Rachel Appel</a>.</li>
  <li>We had three community standups this week: .NET tooling <a href="https://www.youtube.com/watch?v=fijQkqWssn0">talks about NuGet improvements</a>, Entity Framework <a href="https://www.youtube.com/watch?v=W1sxepfIMRM">talks many-to-many</a>, and ASP.NET <a href="https://www.youtube.com/watch?v=IQLEjj7v4io">talks .NET 5 stuff</a>.</li>
</ul>

<h3 id="-blazor">ðŸ˜Ž Blazor</h3>

<p>Jon Hilton <a href="https://www.telerik.com/blogs/blazor-vs-vue-web-developers">compares Blazor and Vue</a>, and also <a href="https://www.telerik.com/blogs/how-to-work-with-client-side-blazor">works with client-side Blazor</a>.</p>

<h3 id="-net-core">ðŸš€ .NET Core</h3>

<ul>
  <li>Tomasz PÄ™czek <a href="https://www.tpeczek.com/2020/08/supporting-encrypted-content-encoding.html">supports encrypted content encoding in .NET Core</a>.</li>
  <li>The Code Maze blog <a href="https://code-maze.com/automapper-net-core-custom-projections/">works with IncludeMembers and custom projections with AutoMapper in ASP.NET Core</a>, <a href="https://code-maze.com/signalr-automatic-reconnect-option/">discusses how to implement SignalR automatic reconnect with Angular</a>, and <a href="https://code-maze.com/grpc-aspnet-mongodb/">adds gRPC to an ASP.NET Core project and MongoDB</a>.</li>
  <li>Gunnar Peipman <a href="https://gunnarpeipman.com/aspnet-core-nhibernate-log-sql/">logs NHibernate SQL to ASP.NET Core loggers</a>.</li>
  <li>Damien Bowden <a href="https://damienbod.com/2020/08/19/symmetric-and-asymmetric-encryption-in-net-core/">works through symmetric and asymmetric encryption in .NET Core</a>.</li>
  <li>Andrew Lock <a href="https://andrewlock.net/controlling-ihostedservice-execution-order-in-aspnetcore-3/">controls the IHostedService execution order in ASP.NET Core 3.x</a>.</li>
  <li>ErikEJ <a href="https://erikej.github.io/efcore/2020/08/10/ef-core-power-tools-stored-procedures.html">maps and uses SQL Server stored procedures with EF Core Power Tools</a>, and <a href="https://erikej.github.io/sqlce/2020/08/17/netcore-sql-compact.html">uses SQL Server Compact 4 with .NET Core 3.1 on Windows</a>.</li>
</ul>

<h3 id="-the-cloud">â›… The cloud</h3>

<ul>
  <li>Matias Quaranta <a href="https://devblogs.microsoft.com/cosmosdb/httpclientfactory-cosmos-db-net-sdk/">works with HttpClientFactory in the Azure Cosmos DB .NET SDK</a>.</li>
  <li>At the Azure Community Blog, <a href="https://techcommunity.microsoft.com/t5/azure-developer-community-blog/dapr-a-small-revolution-in-the-microservices-world/ba-p/1595397">a look at Dapr</a>.</li>
  <li>Will Velida <a href="https://dev.to/willvelida/exploring-azure-cosmos-db-serverless-46j3">explores Azure Cosmos DB serverless</a>.</li>
  <li>Dominique St-Amand <a href="https://www.domstamand.com/path-based-routing-in-azure-application-gateway-with-azure-webapps/">uses path-based routing in Azure Application Gateway with Azure WebApps</a>.</li>
  <li>Damien Bowden <a href="https://damienbod.com/2020/08/17/securing-azure-functions-using-api-keys/">secures Azure Functions using API keys</a>.</li>
  <li>Jason Farrell <a href="https://jfarrell.net/2020/08/16/durable-functions-part-3-approve-the-upload/">keeps going on Azure Durable Functions, with approving the upload</a>.</li>
  <li>Daniel Krzyczkowski <a href="https://daniel-krzyczkowski.github.io/Event-Sourcing-With-Azure-Cosmos-Db-Change-Feed/">uses event sourcing with Azure Cosmos SB change feed and Azure Functions</a>.</li>
</ul>

<h3 id="-languages">ðŸ“” Languages</h3>

<ul>
  <li>Thomas Claudius Huber <a href="https://www.thomasclaudiushuber.com/2020/08/18/c-9-top-level-statements-or-should-i-say-hey-wheres-the-main-method/">talks about top-level statements in C# 9</a>.</li>
  <li>Anthony Giretti <a href="https://anthonygiretti.com/2020/08/19/asp-net-core-5-make-your-options-immutable/">makes options immutable in ASP.NET Core 5 and C# 9</a>, and <a href="https://anthonygiretti.com/2020/08/19/introducing-c-9-native-sized-integers/">looks at native-sized integers in C# 9</a>.</li>
  <li>Khalid Abuhakmeh <a href="https://khalidabuhakmeh.com/use-select-dropdown-in-aspdotnet-razor">uses the select drop-down in ASP.NET Razor</a>.</li>
  <li>Roland Weigelt <a href="https://weblogs.asp.net/rweigelt/ways-to-create-a-thumbnail-for-video-and-image-files-in-c">creates a thumbnail for video and image files in C#</a>.</li>
  <li>Gunnar Peipman <a href="https://gunnarpeipman.com/aspnet-mvc-structuremap-dependency-injection/">uses Structuremap in legacy ASP.NET MVC apps</a>.</li>
</ul>

<h3 id="-tools">ðŸ”§ Tools</h3>

<ul>
  <li>Trevor Sullivan <a href="https://trevorsullivan.net/2020/08/19/write-code-faster-using-visual-studio-code-error-lens/">works with Visual Studio Code and Error Lens</a>.</li>
  <li>Matthew MacDonald discusses <a href="https://medium.com/young-coder/the-design-patterns-programmers-really-use-c2e7790a900e">the design patterns programmers <em>really</em> use</a>.</li>
  <li>Dave Brock (ahem) <a href="https://daveabrock.com/2020/08/19/microservices-with-tye-1">takes a look at Project Tye for microservices development</a>.</li>
  <li>Mathankumar Rajendran <a href="https://www.syncfusion.com/blogs/post/how-to-develop-an-asp-net-core-application-using-visual-studio-code.aspx">develops an ASP.NET Core app using VS Code</a>.</li>
  <li>Mark Seemann says <a href="https://blog.ploeh.dk/2020/08/17/unit-testing-is-fine/">unit testing is fine</a>.</li>
  <li>Vinicius Apolinario <a href="https://techcommunity.microsoft.com/t5/itops-talk-blog/journey-of-an-app-how-to-extract-a-web-app-from-iis-to-create-a/ba-p/1590189">extracts a web app from IIS to create a new container image</a>.</li>
  <li>Rami Honig <a href="https://oz-code.com/blog/net-c-tips/top-10-open-source-nuget-tools-net-development">discusses the top 10 open source NuGet tools for .NET development</a>.</li>
</ul>

<h3 id="-xamarin">ðŸ“± Xamarin</h3>

<ul>
  <li>James Montemagno <a href="https://devblogs.microsoft.com/xamarin/first-run-xamarin-essentials/">talks about app first run detection with Xamarin.Essentials</a>.</li>
  <li>Matthew Leibowitz <a href="https://dotnetdevaddict.co.za/2020/08/16/templated-controls-in-xamarin-forms/">works through templated controls</a>.</li>
  <li>Jonathan Peppers <a href="https://devblogs.microsoft.com/xamarin/performance-xamarin-android-apps/">profiles Xamarin.Android startup</a>.</li>
  <li>David Britch <a href="https://www.davidbritch.com/2020/08/connecting-to-localhost-over-https-for.html">connects to localhost over HTTPS for (Xamarin) Android release builds</a>.</li>
  <li>Jesse Liberty <a href="http://jesseliberty.com/2020/08/16/monkeycache-step-by-step">walks through the MonkeyCache library</a>.</li>
</ul>

<h3 id="-podcasts">ðŸŽ¤ Podcasts</h3>

<ul>
  <li>At Developer Tea, <a href="https://developertea.simplecast.com/episodes/4-things-you-have-to-leave-behind-as-a-beginning-engineer-NlYLyLFT">4 things you have to leave behind as a beginning engineer</a>.</li>
  <li>The Stack Overflow podcast asks: <a href="https://the-stack-overflow-podcast.simplecast.com/episodes/should-managers-of-developers-ever-make-technical-decisions-KhG_a_wb">should managers of developers ever make technical decisions?</a>.</li>
  <li>The .NET Rocks podcast <a href="https://www.dotnetrocks.com/default.aspx?ShowNum=1701">talks with Philip Carter about F#</a>.</li>
  <li>The Azure DevOps Podcast <a href="http://azuredevopspodcast.clear-measure.com/brady-gaster-on-signalr-and-more-episode-102">talks to Brady Gaster about SignalR and more</a>.</li>
  <li>The Coding Blocks Podcast <a href="https://www.codingblocks.net/podcast/the-devops-handbook-anticipating-problems/">keeps working on the DevOps Handbook, talking about anticipating problems</a>.</li>
  <li>The 6 Figure Developer podcast <a href="https://6figuredev.com/podcast/episode-157-blazorcms-speakermeet/">talks about BlazorCMS and SpeakerMeet</a>.</li>
  <li>The No Dogma podcast <a href="https://no-dogma-podcast-301aeb97.simplecast.com/episodes/145-mads-torgersen-c-9-b6PqWza0">talks to Mads Torgersen about C# 9</a>.</li>
</ul>

<h3 id="-videos">ðŸŽ¥ Videos</h3>

<ul>
  <li>The ON.NET Show <a href="https://channel9.msdn.com/Shows/On-NET/Adding-a-little-Swagger-to-OData">adds a little Swagger to OData</a>.</li>
  <li>Data Exposed <a href="https://channel9.msdn.com/Shows/Data-Exposed/Improve-Query-Performance-by-Managing-Statistics-in-Azure-SQL">improves query performance by managing statistics in Azure SQL</a>.</li>
  <li>The Xamarin Show <a href="https://www.youtube.com/watch?v=hGrqgir4gqs">talks about the new Drawing API</a>.</li>
  <li>Brian Lagunas <a href="https://brianlagunas.com/which-do-i-use-configureawait-true-or-false/">asks whether to use ConfigureAwait True or False</a>.</li>
</ul>
:ET