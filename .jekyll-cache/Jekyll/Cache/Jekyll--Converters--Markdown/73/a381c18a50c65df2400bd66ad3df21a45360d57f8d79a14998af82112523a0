I"<p>Like any good adventure, this one started on Twitter.</p>

<p>My friend (and <a href="https://daveabrock.com/2020/06/28/dev-discussions-shahed-chowdhuri">friend of the newsletter</a>) Shahed Chowdhuri took his lunch break to create a simple chat bot using the Microsoft Bot Framework. A user enters something, and it responds with <em>I am Groot</em>.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Full source code for Groot Chatbot: <br /><br />if (true) <br /> echo ‚ÄúI am Groot.‚Äù <a href="https://t.co/NEpWhXbYEX">pic.twitter.com/NEpWhXbYEX</a></p>&mdash; Shahed Chowdhuri @ Microsoft (@shahedC) <a href="https://twitter.com/shahedC/status/1283799107597996035?ref_src=twsrc%5Etfw">July 16, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>If you aren‚Äôt familiar with Groot, he is a tree-like being <a href="https://www.youtube.com/watch?v=f_bJZGbSI1s">from the Marvel universe</a> who only responds with <em>I am Groot</em> - leaving much up to interpretation. Here‚Äôs an idea: how about we change how Groot responds based on the sentiment of what a user types? For example, if a user types something happy, or sad, can we respond in kind? Luckily, <a href="https://azure.microsoft.com/services/cognitive-services/text-analytics/">we can have some fun with Azure‚Äôs Text Analytics Service</a> to analyze sentiments.</p>

<p>From here on out, however, we will address him at Gruut*. Why?</p>

<blockquote class="twitter-tweet" data-conversation="none"><p lang="en" dir="ltr">... and for anyone wondering why it&#39;s spelled Gruut <a href="https://t.co/jskJrY5hLL">pic.twitter.com/jskJrY5hLL</a></p>&mdash; Shahed Chowdhuri @ Microsoft (@shahedC) <a href="https://twitter.com/shahedC/status/1283831870405382152?ref_src=twsrc%5Etfw">July 16, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><em>*please don‚Äôt sue us</em></p>

<p>In this post, we‚Äôll do the following:</p>

<ul>
  <li>Create a chatbot using the Microsoft Bot Framework</li>
  <li>Integrate the Azure Text Analytics service to detect a user‚Äôs sentiment</li>
  <li>Learn how to debug bots</li>
  <li>Safely store our credentials to access our Azure services</li>
</ul>

<p>Many <a href="https://twitter.com/shahedC">thanks to Shahed</a> for the inspiration for this post.</p>

<p>This post covers the following topics.</p>

<ul>
  <li><a href="#before-you-get-started">Before you get started</a>
    <ul>
      <li><a href="#install-bot-framework-sdk-templates">Install Bot Framework SDK templates</a></li>
      <li><a href="#install-bot-framework-emulator">Install Bot Framework Emulator</a></li>
    </ul>
  </li>
  <li><a href="#create-a-text-analytics-service">Create a Text Analytics Service</a></li>
  <li><a href="#create-your-bot-project">Create your bot project</a></li>
  <li><a href="#introducing-your-echobot">Introducing your EchoBot</a></li>
  <li><a href="#first-pass-getting-it-working">First pass: getting it working</a></li>
  <li><a href="#lets-try-it-out">Let‚Äôs try it out</a></li>
  <li><a href="#second-pass-working-with-credentials-safely">Second pass: working with credentials safely</a>
    <ul>
      <li><a href="#add-secrets-to-key-vault">Add secrets to Key Vault</a></li>
      <li><a href="#set-up-app-registration-in-azure-active-directory">Set up app registration in Azure Active Directory</a>
        <ul>
          <li><a href="#create-client-secret">Create client secret</a></li>
        </ul>
      </li>
      <li><a href="#give-your-app-rights-to-the-key-vault">Give your app rights to the Key Vault</a></li>
      <li><a href="#update-your-app">Update your app</a></li>
    </ul>
  </li>
  <li><a href="#wrapping-up">Wrapping up</a></li>
</ul>

<h1 id="before-you-get-started">Before you get started</h1>

<p>While there are multiple ways to develop with the Bot Framework, we‚Äôll use Visual Studio tooling. So before you get started with this tutorial, you‚Äôll need to install Bot Framework templates and the Bot Framework Emulator.</p>

<h2 id="install-bot-framework-sdk-templates">Install Bot Framework SDK templates</h2>

<p>To make project generation easier, you‚Äôll need to install the Bot Framework v4 SDK Templates for Visual Studio. In your Visual Studio, go to <strong>Extensions</strong> &gt; <strong>Manage Extensions,</strong> and search for <strong>bot</strong>. It should be the first result.</p>

<p><img src="http://localhost:4001/images/bot-framework-extension.png" alt="bot framework extension" /></p>

<p>Alternatively, you can find the <a href="https://marketplace.visualstudio.com/items?itemName=BotBuilder.botbuilderv4">direct download at this location</a>.</p>

<h2 id="install-bot-framework-emulator">Install Bot Framework Emulator</h2>

<p>To test and debug your bots (either locally or remotely), you‚Äôll need to install the Bot Framework Emulator. Head on over to the GitHub releases <a href="https://github.com/Microsoft/BotFramework-Emulator/releases">to install the emulator for your specific environment</a>.</p>

<h1 id="create-a-text-analytics-service">Create a Text Analytics Service</h1>

<p>Now, we can head out to Azure to create a Text Analytics instance. Assuming you have an Azure account (if not, you can <a href="https://azure.microsoft.com/">go to the Azure site to sign up and get free credits</a>), head on over to the Azure Portal at <em><a href="https://portal.azure.com/">portal.azure.com</a>.</em></p>

<p>In the search box, enter <strong>Text Analytics,</strong> and select <strong>Text Analytics</strong> from the Marketplace section.</p>

<p><img src="http://localhost:4001/images/text-analytics-marketplace.png" alt="bot framework extension" /></p>

<p>Enter a name, select your subscription, a location, pricing tier (the Free tier should be fine for this tutorial), and a resource group, then click <strong>Create</strong>.</p>

<p><img src="http://localhost:4001/images/create-text-analytics.png" alt="bot framework extension" /></p>

<p>After the deployment completes, click <strong>Go to resource</strong>. Then, click <strong>Keys and Endpoint</strong>. You‚Äôll need to grab a key (Key 1 or Key 2 is fine) and the endpoint for your application. Copy these values somewhere, like a text file.</p>

<p><img src="http://localhost:4001/images/sentiment-keys.png" alt="echo bot template" /></p>

<p>Excellent! Let‚Äôs move on to Visual Studio to create our chatbot.</p>

<h1 id="create-your-bot-project">Create your bot project</h1>

<p>After you install the Bot Framework v4 Templates for Visual Studio, create a new project as you typically would.</p>

<p>From the Project Types drop-down, select <strong>AI Bots</strong> and select the <strong>Echo Bot</strong> template. This will give us the basic functionality we need (since Gruut does a lot of echoing).</p>

<p><img src="http://localhost:4001/images/echo-bot-template.png" alt="echo bot template" /></p>

<h1 id="introducing-your-echobot">Introducing your EchoBot</h1>

<p>When your project loads, navigate over to <code class="language-plaintext highlighter-rouge">EchoBot.cs</code> (in your <code class="language-plaintext highlighter-rouge">Bots</code> folder). You‚Äôll see the <code class="language-plaintext highlighter-rouge">EchoBot</code> implements the <a href="https://docs.microsoft.com/dotnet/api/microsoft.bot.builder.activityhandler?view=botbuilder-dotnet-stable">Microsoft.Bot.Builder.ActivityHandler interface</a>, and has two methods implemented for you.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">OnMessageActivityAsync</code> - this is where you‚Äôll include code specific to your conversational logic. <em>We‚Äôll override this and do our work here.</em></li>
  <li><code class="language-plaintext highlighter-rouge">OnMembersAddedAsync</code> - this is where you‚Äôll provide logic when new members join the conversations (like welcome logic). <em>You can remove this method if you wish, since we aren‚Äôt using it.</em></li>
</ul>

<p>We‚Äôll be working with the <code class="language-plaintext highlighter-rouge">Azure.AI.TextAnalytics</code> package. You can install it now from the NuGet Package Manager or get Visual Studio assistance to install when you get errors. Your choice. üòé</p>

<h1 id="first-pass-getting-it-working">First pass: getting it working</h1>

<p>Now, still in <code class="language-plaintext highlighter-rouge">EchoBot.cs</code>, find the Text Analytics key and endpoint you copied when you created your instance in Azure. At the beginning of your class, declare a <code class="language-plaintext highlighter-rouge">credentials</code> and <code class="language-plaintext highlighter-rouge">endpoint</code> static class variable:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">AzureKeyCredential</span> <span class="n">credentials</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AzureKeyCredential</span><span class="p">(</span><span class="s">"&lt;your key&gt;"</span><span class="p">);</span>
<span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Uri</span> <span class="n">endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"&lt;your endpoint&gt;"</span><span class="p">);</span>
</code></pre></div></div>

<p class="notice--danger"><strong>Hard-coding your credentials is reckless.</strong> Don‚Äôt do this for any apps that have actual users. We will fix this soon‚Äîwe want to get this working first.</p>

<p>Moving on to our <code class="language-plaintext highlighter-rouge">OnMessageActivityAsync</code> method, we‚Äôll first get the text the user entered. We get this by using our <code class="language-plaintext highlighter-rouge">turnContext</code> that is passed in, that‚Äôs an <code class="language-plaintext highlighter-rouge">ITurnContext&lt;MessageActivity&gt;</code>. The <code class="language-plaintext highlighter-rouge">Activity.Text</code> gets the contents of the sent message as a <code class="language-plaintext highlighter-rouge">string</code>.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">userInput</span> <span class="p">=</span> <span class="n">turnContext</span><span class="p">.</span><span class="n">Activity</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
</code></pre></div></div>

<p>Now, we‚Äôre ready to work with our Text Analytics service. We will first get an instance of the Text Analytics client, passing in our credentials:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextAnalyticsClient</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">credentials</span><span class="p">);</span>
</code></pre></div></div>

<p>Then, we want to call the client‚Äôs <code class="language-plaintext highlighter-rouge">AnalyzeSentiment</code> method. When we call this, we get a <a href="https://docs.microsoft.com/dotnet/api/azure.ai.textanalytics.textanalyticsclient.analyzesentiment?view=azure-dotnet">TextAnalytics.DocumentSentiment back</a>, with <a href="https://docs.microsoft.com/dotnet/api/azure.ai.textanalytics.documentsentiment?view=azure-dotnet">tons of data to work with</a>.</p>

<p>We can work with confidence scores, a sentiment for each sentence, or any warnings that occur. For our purposes, we want to work with the <code class="language-plaintext highlighter-rouge">Sentiment</code> property. This property has a <code class="language-plaintext highlighter-rouge">TextSentiment</code>, <a href="https://docs.microsoft.com/dotnet/api/azure.ai.textanalytics.textsentiment?view=azure-dotnet">an enum with valid values as Mixed, Negative, Neutral, or Positive</a>. This should be fine for our purposes. Then, we can make a decision on what to send back to the user.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">sentiment</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">AnalyzeSentiment</span><span class="p">(</span><span class="n">userInput</span><span class="p">).</span><span class="n">Value</span><span class="p">.</span><span class="n">Sentiment</span><span class="p">;</span>
</code></pre></div></div>

<p>Now, we can write a local function in C# (<a href="https://github.com/shahedc/GruutChatbot/pull/2">thanks for the inspiration, David Pine</a>) that leverages switch expressions. We send back specific responses for <code class="language-plaintext highlighter-rouge">Positive</code>, <code class="language-plaintext highlighter-rouge">Negative</code>, and <code class="language-plaintext highlighter-rouge">Neutral</code> results. If we get anything else back, we have a fallback.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">string</span> <span class="nf">GetReplyText</span><span class="p">(</span><span class="n">TextSentiment</span> <span class="n">sentiment</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">sentiment</span> <span class="k">switch</span>
<span class="p">{</span>
    <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Positive</span> <span class="p">=&gt;</span> <span class="s">"I am Gruut."</span><span class="p">,</span>
    <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Negative</span> <span class="p">=&gt;</span> <span class="s">"I AM GRUUUUUTTT!!"</span><span class="p">,</span>
    <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Neutral</span> <span class="p">=&gt;</span> <span class="s">"I am Gruut?"</span><span class="p">,</span>
    <span class="n">_</span> <span class="p">=&gt;</span> <span class="s">"I. AM. GRUUUUUT"</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Now, all that‚Äôs left is to invoke the <code class="language-plaintext highlighter-rouge">GetReplyText</code> function and call <code class="language-plaintext highlighter-rouge">SendActivityAsync</code> to send the message back to the user.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">replyText</span> <span class="p">=</span> <span class="nf">GetReplyText</span><span class="p">(</span><span class="n">sentiment</span><span class="p">);</span>
<span class="k">await</span> <span class="n">turnContext</span><span class="p">.</span><span class="nf">SendActivityAsync</span><span class="p">(</span><span class="n">MessageFactory</span><span class="p">.</span><span class="nf">Text</span><span class="p">(</span><span class="n">replyText</span><span class="p">,</span> <span class="n">replyText</span><span class="p">),</span> <span class="n">cancellationToken</span><span class="p">);</span>
</code></pre></div></div>

<p>That should do it! For your reference, here‚Äôs the entire class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Azure</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Azure.AI.TextAnalytics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Bot.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Bot.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">GruutChatbot.Bots</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EchoBot</span> <span class="p">:</span> <span class="n">ActivityHandler</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">AzureKeyCredential</span> <span class="n">credentials</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">AzureKeyCredential</span><span class="p">(</span><span class="s">"&lt;my key&gt;"</span><span class="p">);</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Uri</span> <span class="n">endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"&lt;my endpoint&gt;"</span><span class="p">);</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">OnMessageActivityAsync</span><span class="p">(</span><span class="n">ITurnContext</span><span class="p">&lt;</span><span class="n">IMessageActivity</span><span class="p">&gt;</span> <span class="n">turnContext</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextAnalyticsClient</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">credentials</span><span class="p">);</span>
            <span class="kt">string</span> <span class="n">userInput</span> <span class="p">=</span> <span class="n">turnContext</span><span class="p">.</span><span class="n">Activity</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">sentiment</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">AnalyzeSentiment</span><span class="p">(</span><span class="n">userInput</span><span class="p">).</span><span class="n">Value</span><span class="p">.</span><span class="n">Sentiment</span><span class="p">;</span>

            <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetReplyText</span><span class="p">(</span><span class="n">TextSentiment</span> <span class="n">sentiment</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">sentiment</span> <span class="k">switch</span>
            <span class="p">{</span>
                <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Positive</span> <span class="p">=&gt;</span> <span class="s">"I am Gruut."</span><span class="p">,</span>
                <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Negative</span> <span class="p">=&gt;</span> <span class="s">"I AM GRUUUUUTTT!!"</span><span class="p">,</span>
                <span class="n">TextSentiment</span><span class="p">.</span><span class="n">Neutral</span> <span class="p">=&gt;</span> <span class="s">"I am Gruut?"</span><span class="p">,</span>
                <span class="n">_</span> <span class="p">=&gt;</span> <span class="s">"I. AM. GRUUUUUT"</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">replyText</span> <span class="p">=</span> <span class="nf">GetReplyText</span><span class="p">(</span><span class="n">sentiment</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">turnContext</span><span class="p">.</span><span class="nf">SendActivityAsync</span><span class="p">(</span><span class="n">MessageFactory</span><span class="p">.</span><span class="nf">Text</span><span class="p">(</span><span class="n">replyText</span><span class="p">,</span> <span class="n">replyText</span><span class="p">),</span> <span class="n">cancellationToken</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="lets-try-it-out">Let‚Äôs try it out</h1>

<p>Let‚Äôs see how this works. Before we debug this, set a breakpoint at the declaration of <code class="language-plaintext highlighter-rouge">GetReplyText</code>. Now, start debugging your app in Visual Studio. A browser will launch‚Äîtake note of the port number after localhost (<code class="language-plaintext highlighter-rouge">https://localhost:xxxx</code>).</p>

<p>Finally, we can now work with the Bot Framework Emulator. At the initial screen, click <code class="language-plaintext highlighter-rouge">Open Bot</code>. For your bot URL, enter <code class="language-plaintext highlighter-rouge">http://localhost:xxxx/api/messages</code> and replace <code class="language-plaintext highlighter-rouge">xxxx</code> with your port number you are using. Then, click <code class="language-plaintext highlighter-rouge">Connect</code>.</p>

<p><img src="http://localhost:4001/images/open-a-bot.png" alt="echo bot template" /></p>

<p>You are connected! Enter some text to try it out and hit your breakpoint. I‚Äôll type <strong>I‚Äôm really mad</strong>.</p>

<p>With my breakpoint hit, hover over <code class="language-plaintext highlighter-rouge">sentiment</code> and you‚Äôll see it comes back as <code class="language-plaintext highlighter-rouge">Negative</code>.</p>

<p><img src="http://localhost:4001/images/negative.png" alt="echo bot template" /></p>

<p>Great! Hit <em>Continue</em> in Visual Studio, go back to the Bot Framework Emulator, and you‚Äôll see that Gruut matches your anger.</p>

<p><img src="http://localhost:4001/images/really-mad.png" alt="echo bot template" /></p>

<p>Excellent! This is great‚Äîhowever, before we ship an app with hard-coded credentials in the source code, we should probably clean that up. Let‚Äôs do that now.</p>

<h1 id="second-pass-working-with-credentials-safely">Second pass: working with credentials safely</h1>

<p>Clearly, we do not want to hard-code our credentials. Instead, here‚Äôs what we‚Äôll do:</p>

<ul>
  <li>Store our key and endpoint in the Azure Key Vault</li>
  <li>In Azure Active Directory, create a new app registration</li>
  <li>Give this new registration rights to access the Key Vault</li>
  <li>In our app, use the configuration provider to access key vault using our provided client ID and secret</li>
</ul>

<p>Of course, there are even more, enterprise-y ways to do it, like managed identities‚Äîlike everything else, it‚Äôs a balance of security and overkill for what we‚Äôre doing.</p>

<p>Before we proceed, you‚Äôll need to create a Key Vault or use an existing one. For details on how to create a Key Vault, <a href="https://docs.microsoft.com/azure/key-vault/general/quick-create-portal">check out the docs</a> and come back when you‚Äôre done. I‚Äôll wait.</p>

<h2 id="add-secrets-to-key-vault">Add secrets to Key Vault</h2>

<p>From your Key Vault, click <strong>Secrets</strong> and then <strong>Generate/Import</strong> to create two secrets: <code class="language-plaintext highlighter-rouge">AzureKeyCredential</code> and <code class="language-plaintext highlighter-rouge">CognitiveServicesEndpoint</code> I won‚Äôt be showing you my setup for security reasons, but it‚Äôs pretty straight-forward.</p>

<h2 id="set-up-app-registration-in-azure-active-directory">Set up app registration in Azure Active Directory</h2>

<p>We‚Äôre now ready to set up our app registration. Head on over to Azure Active Directory (I just use the search box), and click <strong>App Registrations</strong>, then <strong>New registration</strong>. Give your registration the name and accept the default supported account type, then click <strong>Register</strong>.</p>

<p><img src="http://localhost:4001/images/app-registration.png" alt="echo bot template" /></p>

<p>Copy the <code class="language-plaintext highlighter-rouge">Application (client) ID</code>, as we will need it later.</p>

<h3 id="create-client-secret">Create client secret</h3>

<p>Of course, this registration does nothing by its own, so we‚Äôll need to create a client secret so our app can know about it. While still in the App Registrations section, click <strong>Certificates &amp; secrets</strong>, then click <strong>New client secret</strong>.</p>

<p>Enter a name, leave the default expiration policy, and click <strong>Add</strong>.</p>

<p><img src="http://localhost:4001/images/client-secret.png" alt="echo bot template" /></p>

<p>You should see your new client secret. Copy this value somewhere‚Äîwe will also need it soon.</p>

<p><img src="http://localhost:4001/images/key-vault-client-secret.png" alt="echo bot template" /></p>

<h2 id="give-your-app-rights-to-the-key-vault">Give your app rights to the Key Vault</h2>

<p>Now, we‚Äôre ready to head over to the Key Vault to give our chatbot access to use it via the app registration. Once you get to the Key Vault, click Access policies, then <strong>+ Add Access Policy</strong>.</p>

<p>Accept the defaults other than the following, then click <strong>Add</strong>:</p>

<ul>
  <li><strong>Secret permissions</strong> - Get, List</li>
  <li><strong>Select principal</strong> - Select the client secret you used earlier (in my case, <code class="language-plaintext highlighter-rouge">gruut-bot</code>)</li>
</ul>

<p>We‚Äôre done with Azure. Now, all we need to do is update our app.</p>

<h2 id="update-your-app">Update your app</h2>

<p>In your <code class="language-plaintext highlighter-rouge">appsettings.json</code> file, update it to include the name of your key vault (whatever is before <em>.vault.azure.net</em>) and the client ID and secret you just copied.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"KeyVault"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-key-vault-name"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ClientId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-client-id"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ClientSecret"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-client-secret"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>In your <code class="language-plaintext highlighter-rouge">Program.cs</code> file, in <code class="language-plaintext highlighter-rouge">CreateHostBuilder</code>, we need to update it to grab the values in question once the app starts.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="n">IHostBuilder</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">ConfigureAppConfiguration</span><span class="p">((</span><span class="n">context</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builtConfig</span> <span class="p">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
            <span class="n">config</span><span class="p">.</span><span class="nf">AddAzureKeyVault</span><span class="p">(</span>
                <span class="s">$"https://</span><span class="p">{</span><span class="n">builtConfig</span><span class="p">[</span><span class="s">"KeyVault:Name"</span><span class="p">]}</span><span class="s">.vault.azure.net"</span><span class="p">,</span>
                <span class="n">builtConfig</span><span class="p">[</span><span class="s">"KeyVault:ClientId"</span><span class="p">],</span>
                <span class="n">builtConfig</span><span class="p">[</span><span class="s">"KeyVault:ClientSecret"</span><span class="p">]);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nf">ConfigureWebHostDefaults</span><span class="p">(</span><span class="n">webBuilder</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="n">webBuilder</span><span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;();</span>
        <span class="p">});</span>
</code></pre></div></div>

<p>Now, if you go back to <code class="language-plaintext highlighter-rouge">EchoBot.cs</code>, remove the hard-coded strings and replace it with a constructor <a href="https://docs.microsoft.com/dotnet/api/microsoft.extensions.configuration.iconfiguration?view=dotnet-plat-ext-3.1">that references the <code class="language-plaintext highlighter-rouge">IConfiguration</code> interface</a> using some dependency injection. This allows us to access our configuration properties.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

<span class="k">public</span> <span class="nf">EchoBot</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then, all you need to do is change the <code class="language-plaintext highlighter-rouge">TextAnalyticsClient</code> parameters to reference your configuration.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TextAnalyticsClient</span><span class="p">(</span>
             <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">_configuration</span><span class="p">[</span><span class="s">"CognitiveServicesEndpoint"</span><span class="p">]),</span>
             <span class="k">new</span> <span class="nf">AzureKeyCredential</span><span class="p">(</span><span class="n">_configuration</span><span class="p">[</span><span class="s">"AzureKeyCredential"</span><span class="p">]));</span>
</code></pre></div></div>

<p>Run your app again and you‚Äôll see it should be working the same as before‚Äîexcept this time, our Text Analytics credentials are stored away in our Key Vault.</p>

<h1 id="wrapping-up">Wrapping up</h1>

<p>In this post, we got our feet wet with the Microsoft Bot Framework. We incorporated Azure Cognitive Services to detect the sentiment of a user, and also worked on safeguarding our credentials using the Azure Key Vault and Azure Active Directory.</p>

<p>You can <a href="https://github.com/shahedc/GruutChatbot">access the source code at Shahed‚Äôs repo</a>, and PRs/GIFs (or both) are always welcome.</p>
:ET